<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <OutputType>Exe</OutputType>
    <!-- Other properties go here -->
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <OutputType>WinExe</OutputType>
    <!-- Other properties go here -->
  </PropertyGroup>

  <PropertyGroup>
    <!-- GL.cs configuration options! -->

    <!-- Profile: CORE/(COMPAT NOT IMPLEMENTED) -->
    <OpenGLProfile>CORE</OpenGLProfile>

    <!-- Version: Any valid OpenGL version from 1.0-4.6 (inclusive) -->
    <OpenGLVersionMajor>3</OpenGLVersionMajor>
    <OpenGLVersionMinor>3</OpenGLVersionMinor>

    <!-- Defining exposed wrapper API (SAFE/UNSAFE/BOTH) -->
    <!-- SAFE: Only safe functions are exposed -->
    <!-- UNSAFE: Only unsafe functions are exposed -->
    <!-- BOTH: Both safe and unsafe functions are exposed -->
    <!-- ^ NOTE: Some functions (e.g. glGetString(GLEnum enum)) cannot have both an unsafe and safe -->
    <!-- variant with the same name since they would have the same parameter type, and therefore the same signature, causing a collision. -->
    <!-- In those cases (very few), both glGetStringSafe and glGetString are exposed, where the one with with the Safe suffix is  -->
    <!-- the safe variant, and the one without the Safe suffix is the unsafe variant (allowing native API naming to take precedence for native API signature) -->
    <OpenGLWrapperAPI>BOTH</OpenGLWrapperAPI>

    <!-- Defining constants for compile time availability of APIs -->
    <DefineConstants>$(DefineConstants);OGL_V_$(OpenGLVersionMajor)_$(OpenGLVersionMinor);OGL_P_$(OpenGLProfile);OGL_WRAPPER_API_$(OpenGLWrapperAPI)</DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFramework>net7.0</TargetFramework>
    <RootNamespace>GameStarter</RootNamespace>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <LangVersion>preview</LangVersion>
    <ApplicationIcon>..\..\static\icon.ico</ApplicationIcon>
    <PublishSingleFile>true</PublishSingleFile>
    <LangVersion>11</LangVersion>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="NLua" Version="1.6.2" />
    <PackageReference Include="QuikGraph" Version="2.5.0" />
    <PackageReference Include="StbImageSharp" Version="2.27.13" />
    <PackageReference Include="System.CommandLine" Version="2.0.0-beta4.22272.1" />
    <PackageReference Include="System.Drawing.Common" Version="7.0.0" />
    <PackageReference Include="DotGLFW" Version="1.0.0" />
  </ItemGroup>

  <ItemGroup>
    <GameResourcesFiles Include="..\..\resources\**\*.*" />
    <GameModsFiles Include="..\..\mods\**\*.*" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\modules\Symphony\Symphony\Symphony.csproj" />
  </ItemGroup>

  <Target Name="CopyResourcesAndModsRelease" AfterTargets="Build" Condition=" '$(Configuration)' == 'Release' ">
    <Message Text="Copying resources and mods to output directory..." Importance="High" />
    <Copy SourceFiles="@(GameResourcesFiles)" DestinationFolder="$(OutDir)resources\%(RecursiveDir)" />
    <Copy SourceFiles="@(GameModsFiles)" DestinationFolder="$(OutDir)mods\%(RecursiveDir)" />
  </Target>

  <Target Name="CreateICO" BeforeTargets="BeforeBuild">
    <Message Text="Creating icon..." Importance="High" />
    <Exec Command="powershell.exe -NonInteractive -executionpolicy Unrestricted -command &quot;&amp; { ..\..\.utils\pngtoico.ps1 ..\..\static\icon.png ..\..\static\icon.ico }&quot;" />
  </Target>

  <Target Name="CleanICO" AfterTargets="AfterBuild">
    <Message Text="Cleaning icon..." Importance="High" />
    <Delete Files="..\..\static\icon.ico" />
  </Target>

</Project>
